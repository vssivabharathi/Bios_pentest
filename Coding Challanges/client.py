import socket
import hashlib
import hmac

# client information
server = "localhost"
port = 55555

# create socket object
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((server, port))

# Receive the symmetric key from the server
key = s.recv(16)

while True:
    message = input("Enter message: ")

    # Encrypt the message using the symmetric key
    encrypted_msg = message.encode('ascii')

    # Calculate SHA-512 hash for integrity check
    hash_function = hashlib.sha512()
    hash_function.update(message.encode('ascii'))
    hash_value = hash_function.hexdigest()

    # Calculate HMAC for message authentication
    hmac_key = hmac.new(key, encrypted_msg, hashlib.sha256).hexdigest()

    # Send the encrypted message, SHA-512 hash, and HMAC to the server
    s.send(encrypted_msg)
    s.send(hash_value.encode('ascii'))
    s.send(hmac_key.encode('ascii'))

    # Receive the server's response
    response = s.recv(1024)

    # Decrypt the response using the symmetric key
    decrypted_response = response.decode('ascii')

    # Receive and check the integrity hash from the server
    received_hash = s.recv(64).decode('ascii')
    hash_function = hashlib.sha512()
    hash_function.update(decrypted_response.encode('ascii'))

    if hash_function.hexdigest() != received_hash:
        print("Integrity check failed. Response may have been tampered.")
        break

    # Receive and check the HMAC from the server
    received_hmac = s.recv(64).decode('ascii')
    hmac_key = hmac.new(key, response, hashlib.sha256).hexdigest()

    if hmac_key != received_hmac:
        print("Message authentication failed. Connection closed.")
        break

    print("Server's response:", decrypted_response)

# Close the connection
s.close()
