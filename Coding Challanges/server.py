import socket
import threading
import hashlib
import hmac
import os

# server information
server = "localhost"
port = 55555

# Generate a symmetric key
key = os.urandom(16)  # 16 bytes for AES-128

# create socket object
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.bind((server, port))
s.listen(5)
print("Server is ready to accept connections")

# define function for handling client connection
def handle_client(conn, addr):
    print("Connected to", addr)

    # Send the symmetric key to the client
    conn.send(key)

    while True:
        try:
            msg = conn.recv(1024)
            if not msg:
                break

            # Decrypt the received message using the symmetric key
            decrypted_msg = msg.decode('ascii')
            print("Received from ({}) : {}".format(addr, decrypted_msg))

            # Check integrity using SHA-512
            hash_function = hashlib.sha512()
            hash_function.update(decrypted_msg.encode('ascii'))
            received_hash = conn.recv(64).decode('ascii')

            if hash_function.hexdigest() != received_hash:
                print("Integrity check failed. Message may have been tampered.")
                break

            # Perform HMAC for message authentication
            hmac_key = hmac.new(key, msg, hashlib.sha256).hexdigest()
            received_hmac = conn.recv(64).decode('ascii')

            if hmac_key != received_hmac:
                print("Message authentication failed. Connection closed.")
                break

            response = input("Enter response: ")

            # Encrypt the response using the symmetric key
            conn.send(response.encode('ascii'))

            # Calculate SHA-512 hash for integrity check
            hash_function = hashlib.sha512()
            hash_function.update(response.encode('ascii'))
            conn.send(hash_function.hexdigest().encode('ascii'))

            # Calculate HMAC for message authentication
            hmac_key = hmac.new(key, response.encode('ascii'), hashlib.sha256).hexdigest()
            conn.send(hmac_key.encode('ascii'))

        except Exception as e:
            print("Error:", e)
            break

    print("Closed connection to", addr)
    conn.close()

while True:
    # accept connection if there is any
    conn, addr = s.accept()
    # start new thread for handling the client's request
    thread = threading.Thread(target=handle_client, args=(conn, addr))
    thread.start()
